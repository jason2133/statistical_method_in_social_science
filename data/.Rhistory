rm(list = ls())
# creating objects
n <- 15
n
print(n)
# case sensitive
x <- 5
x
X <- 2
X
n <- 10 + 2
n
(10 + 2) * 5
#
y <- c(1,2,3)
y
z <- c(2,3,4)
y
# z는 2, 3, 4
z <- c(2,3,4)
z
# Combine Column (열)
u <- cbind(y, z)
u
source('C:/Users/jason/Desktop/STAT242/Ch0_R4beginners1.R')
source('C:/Users/jason/Desktop/STAT242/Ch0_R4beginners1.R')
# z는 2, 3, 4
z <- c(2,3,4)
z
# Combine Column (열)
u <- cbind(y, z)
u
v <- rbind(y, z)
v
rm(list = ls())
# creating objects
n <- 15
n
print(n)
# case sensitive
x <- 5
x
X <- 2
X
n <- 10 + 2
n
(10 + 2) * 5
# Vector 정의
# y는 1, 2, 3
y <- c(1,2,3)
y
# z는 2, 3, 4
z <- c(2,3,4)
z
# Combine Column (열)
u <- cbind(y, z)
u
v <- rbind(y, z)
v
M <- data.frame(y, z)
M
str(M)
# online help
?lm # linear regression
??lm # keyword search
# generating sequence
x <- 1:30
x
1:10 - 1
seq(1, 5, by = 0.5)
seq(1, 5, length = 5)
rep(1, 5)
# gnerating random variables
rnorm(10, 0, 1)   # N(0,1)
rbinom(4, 5, 0.2) # B(5, 0.2)
rpois(5, 3)       # Poisson(3)
# types of objects
# vector
x <- c(1,2,5,7)
str(x)
# factor
y <- factor(1:3)
x
y
str(y)
# matrix
z1 <- matrix(1:6, 3, 2)
z1
str(z1)
z2 <- matrix(1:6, 3, 2, byrow = T)
z2
t(z2) # transpose
# data.frame
x <- 1:4
n <- rep(10, 4)
data.frame(x, n)
# list
x <- "names"
y <- 1:4
L1 <- list(x, y)
L1
L2 <- list(x = x, y = y)
L2
# indexing
y
y[3]
z1
z1[1:3]
z1[4:5]
z1[2,2]
rm(list = ls())
# creating objects
n <- 15
n
print(n)
# case sensitive
x <- 5
x
X <- 2
X
n <- 10 + 2
n
(10 + 2) * 5
# Vector 정의
# y는 1, 2, 3
y <- c(1,2,3)
y
# z는 2, 3, 4
z <- c(2,3,4)
z
# Combine Column (열)
u <- cbind(y, z)
u
v <- rbind(y, z)
v
# Data Frame의 차이점을 파악하는 것이 중요하다!
M <- data.frame(y, z)
M
# Structure  데이터 구조가 어떤지 알려주는 str
str(M)
# Combine Column (열)
u <- cbind(y, z)
u
str(u)
v <- rbind(y, z)
v
# Data Frame과 rbind 사이의 차이점을 파악하는 것이 중요하다!
M <- data.frame(y, z)
M
# Structure  데이터 구조가 어떤지 알려주는 str
str(M)
# online help
?lm # linear regression
??lm # keyword search
??lm # keyword search
# generating sequence
x <- 1:30
x
1:10 - 1
# online help
?lm # linear regression
??lm # keyword search
??linear.model
# Keyword 키워드를 모른다면 ?? 물음표 2개를 앞에 붙이면 된다!
??lm # keyword search
??linear.model
# generating sequence
x <- 1:30
x
1:10 - 1
seq(1, 5, by = 0.5)
seq(1, 5, length = 5)
rep(1, 5)
# gnerating random variables
rnorm(10, 0, 1)   # N(0,1)
rbinom(4, 5, 0.2) # B(5, 0.2)
rpois(5, 3)       # Poisson(3)
1:10 - 1
seq(1, 5, by = 0.5)
seq(1, 5, length = 5)
seq(1, 5, by = 0.5)
?seq(1, 5, by = 0.5)
seq(1, 5, length = 5)
seq(1, 5, 5)
rep(1, 5)
# gnerating random variables
rnorm(10, 0, 1)   # N(0,1)
# 정규분포
# generating random variables
rnorm(10, 0, 1)   # N(0,1)
rbinom(4, 5, 0.2) # B(5, 0.2)
rpois(5, 3)       # Poisson(3)
rpois(5, 3)       # Poisson(3)
rnorm(10)
set.seed(1)
# generating random variables
rnorm(10, 0, 1)   # N(0,1)
rnorm(10) # Standard Normal Distribution
set.seed(1)
rnorm(10)
rnorm(10)
?set.seed
# types of objects
# vector
x <- c(1,2,5,7)
x
str(x)
# factor
y <- factor(1:3)
y
str(y)
# matrix
z1 <- matrix(1:6, 3, 2)
z1
str(z1)
z2 <- matrix(1:6, 3, 2, byrow = T)
z2
z2 <- matrix(1:6, 3, 2, byrow = T)
z2
t(z2) # transpose
# data.frame
x <- 1:4
# data.frame
x <- 1:4
# data.frame
x <- 1:4
n <- rep(10, 4)
data.frame(x, n)
data.frame(x, n)
# list
x <- "names"
y <- 1:4
L1 <- list(x, y)
L1
L2 <- list(x = x, y = y)
L2
# indexing
y
y[3]
z1
z1[1:3]
z1[4:5]
z1[2,2]
L1[[1]]
# data.frame
x <- 1:4
n <- rep(10, 4) # 10을 4번 반복해라!
data.frame(x, n)
# list
x <- "names"
y <- 1:4
L1 <- list(x, y)
L1
# list
x <- "names" # the Character
y <- 1:4 # Number
L1 <- list(x, y)
L1
L2 <- list(x = x, y = y)
L2
cbind(x, y)
# list
x <- "names" # the Character
y <- 1:4 # Number
L1 <- list(x, y)
L1
cbind(x, y)
# cbind(x, y)와 L1을 비교해보자.
data.frame(x, y)
str(data.frame(x, y))
L2 <- list(x = x, y = y)
L2
L2 <- list(x = x, y = y)
L2
# indexing
y
y[3]
z1
z1[1:3]
z1[4:5]
z1[2,2]
z1[2,2] # 행렬 (2, 2) 위치에 있는걸 Print 해라
L1[[1]]
L1[1]
L2[["x"]]
L2["x"]
L2$x
z1
z1[1:3]
z1[4:5]
z1[2,2] # 행렬 (2, 2) 위치에 있는걸 Print 해라
L1[[1]]
L1[1]
L2[["x"]]
L1[1]
L2[["x"]]
L2["x"]
L2$x
str(L1[[1]])
str(L1[1])
str(L1[1])
L2[["x"]]
L2["x"]
L2$x
# matrix computation
# check dimension
z1; dim(z1)
z2; dim(z2)
z2; dim(z2) # dim은 차원을 말한
z1 + z2
z1 - z2
z1 * z2
z1 / z2
z1 %*% z2 # matrix(multiplication) error!
t(z1) %*% z2 # works
t(z2) %*% z1 # again, works!
z1 + z2
z1 + z2
z1 - z2
z1 * z2
z1 / z2
z1 %*% z2 # matrix(multiplication) error!
t(z1) %*% z2 # works
t(z2) %*% z1 # again, works!
z1 * z2
z1 + c(1, 2)
z1 - z2
z1
z1 + c(1, 2)
z1
z1 + c(1, 2)
z1 * z2
z1 / z2
z1 %*% z2 # matrix(multiplication) error!
z1 + c(1, 2)
z1
z2
z1 * z2
z1 %*% z2 # matrix(multiplication) error!
t(z1) %*% z2 # works
t(z2) %*% z1 # again, works!
# generate data
set.seed(1)
x <- rnorm(30, 0, 1) # ~ N(0,1)
length(x) # length of n
sum(x)    # sum
mean(x)   # average
median(x) # median
sd(x)     # stadnard diviation
var(x)    # variance
x <- rnorm(30, 0, 1) # ~ N(0,1)
length(x) # length of n
sum(x)    # sum
mean(x)   # average
median(x) # median
sd(x)     # stadnard diviation
var(x)    # variance
min(x);max(x) # minimum/maximum
which.max(x);which.min(x) # index of minimum/maximum
round(x, 3) # rounding number with 3 digits
round(x, 3) # rounding number with 3 digits
rev(x)      # revert x
sort(x)     # sorting x
rank(x)     # rank of x
# some more..
x^2         # squre
abs(x)      # absolute value
log(x^2)    # log with base e
exp(x)      # exponential
prod(x)     # product
y <- rnorm(30, 0, 1) # another vector
cor(x, y)   # coreation coefficient
plot(x, y)  # scatter plot
?plot       # help
# read data from files
setwd("~/Dropbox/teaching/201901_ST242/r-code/data")
data <- read.table("examscore.txt", header = T)
str(data)
?plot       # help
# read data from files
setwd("C:\Users\jason\Desktop\STAT242\data")
data <- read.table("examscore.txt", header = T)
# read data from files
setwd("C:/Users/jason/Desktop/STAT242/data")
data <- read.table("examscore.txt", header = T)
str(data)
hist(data$Score) # histogram
stem(data$Score) # stem-leaf plot
boxplot(data$Score) # boxplot
attach(data)
boxplot(Score)      # again boxplot
detach(data)
boxplot(Score ~ Group, data = data) # boxplot by groups
round(x, 3) # rounding number with 3 digits
rev(x)      # revert x
sort(x)     # sorting x
rank(x)     # rank of x
sort(x, ascending=F)
rank(x)     # rank of x
rank(x)     # rank of x
# some more..
x^2         # squre
abs(x)      # absolute value
log(x^2)    # log with base e
exp(x)      # exponential
prod(x)     # product
y <- rnorm(30, 0, 1) # another vector
cor(x, y)   # coreation coefficient
plot(x, y)  # scatter plot
?plot       # help
# read data from files
setwd("C:/Users/jason/Desktop/STAT242/data")
data <- read.table("examscore.txt", header = T)
data <- read.table("examscore.txt", header = T)
str(data)
hist(data$Score) # histogram
stem(data$Score) # stem-leaf plot
boxplot(data$Score) # boxplot
attach(data)
boxplot(Score)      # again boxplot
detach(data)
boxplot(Score ~ Group, data = data) # boxplot by groups
